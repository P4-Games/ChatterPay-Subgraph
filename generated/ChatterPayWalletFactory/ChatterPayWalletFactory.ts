// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProxyCreated extends ethereum.Event {
  get params(): ProxyCreated__Params {
    return new ProxyCreated__Params(this);
  }
}

export class ProxyCreated__Params {
  _event: ProxyCreated;

  constructor(event: ProxyCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proxyAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ChatterPayWalletFactory extends ethereum.SmartContract {
  static bind(address: Address): ChatterPayWalletFactory {
    return new ChatterPayWalletFactory("ChatterPayWalletFactory", address);
  }

  beacon(): Address {
    let result = super.call("beacon", "beacon():(address)", []);

    return result[0].toAddress();
  }

  try_beacon(): ethereum.CallResult<Address> {
    let result = super.tryCall("beacon", "beacon():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  computeProxyAddress(_owner: Address): Address {
    let result = super.call(
      "computeProxyAddress",
      "computeProxyAddress(address):(address)",
      [ethereum.Value.fromAddress(_owner)],
    );

    return result[0].toAddress();
  }

  try_computeProxyAddress(_owner: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "computeProxyAddress",
      "computeProxyAddress(address):(address)",
      [ethereum.Value.fromAddress(_owner)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createProxy(_owner: Address): Address {
    let result = super.call("createProxy", "createProxy(address):(address)", [
      ethereum.Value.fromAddress(_owner),
    ]);

    return result[0].toAddress();
  }

  try_createProxy(_owner: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createProxy",
      "createProxy(address):(address)",
      [ethereum.Value.fromAddress(_owner)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProxies(): Array<Address> {
    let result = super.call("getProxies", "getProxies():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getProxies(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getProxies", "getProxies():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getProxiesCount(): BigInt {
    let result = super.call(
      "getProxiesCount",
      "getProxiesCount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getProxiesCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProxiesCount",
      "getProxiesCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProxyOwner(proxy: Address): Bytes {
    let result = super.call("getProxyOwner", "getProxyOwner(address):(bytes)", [
      ethereum.Value.fromAddress(proxy),
    ]);

    return result[0].toBytes();
  }

  try_getProxyOwner(proxy: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getProxyOwner",
      "getProxyOwner(address):(bytes)",
      [ethereum.Value.fromAddress(proxy)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  l1Storage(): Address {
    let result = super.call("l1Storage", "l1Storage():(address)", []);

    return result[0].toAddress();
  }

  try_l1Storage(): ethereum.CallResult<Address> {
    let result = super.tryCall("l1Storage", "l1Storage():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  l2Storage(): Address {
    let result = super.call("l2Storage", "l2Storage():(address)", []);

    return result[0].toAddress();
  }

  try_l2Storage(): ethereum.CallResult<Address> {
    let result = super.tryCall("l2Storage", "l2Storage():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymaster(): Address {
    let result = super.call("paymaster", "paymaster():(address)", []);

    return result[0].toAddress();
  }

  try_paymaster(): ethereum.CallResult<Address> {
    let result = super.tryCall("paymaster", "paymaster():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxies(param0: BigInt): Address {
    let result = super.call("proxies", "proxies(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_proxies(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("proxies", "proxies(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _beacon(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _entryPoint(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _paymaster(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateProxyCall extends ethereum.Call {
  get inputs(): CreateProxyCall__Inputs {
    return new CreateProxyCall__Inputs(this);
  }

  get outputs(): CreateProxyCall__Outputs {
    return new CreateProxyCall__Outputs(this);
  }
}

export class CreateProxyCall__Inputs {
  _call: CreateProxyCall;

  constructor(call: CreateProxyCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateProxyCall__Outputs {
  _call: CreateProxyCall;

  constructor(call: CreateProxyCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class GetProxyOwnerCall extends ethereum.Call {
  get inputs(): GetProxyOwnerCall__Inputs {
    return new GetProxyOwnerCall__Inputs(this);
  }

  get outputs(): GetProxyOwnerCall__Outputs {
    return new GetProxyOwnerCall__Outputs(this);
  }
}

export class GetProxyOwnerCall__Inputs {
  _call: GetProxyOwnerCall;

  constructor(call: GetProxyOwnerCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetProxyOwnerCall__Outputs {
  _call: GetProxyOwnerCall;

  constructor(call: GetProxyOwnerCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetKeystoreCall extends ethereum.Call {
  get inputs(): SetKeystoreCall__Inputs {
    return new SetKeystoreCall__Inputs(this);
  }

  get outputs(): SetKeystoreCall__Outputs {
    return new SetKeystoreCall__Outputs(this);
  }
}

export class SetKeystoreCall__Inputs {
  _call: SetKeystoreCall;

  constructor(call: SetKeystoreCall) {
    this._call = call;
  }

  get _l1Storage(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _l2Storage(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetKeystoreCall__Outputs {
  _call: SetKeystoreCall;

  constructor(call: SetKeystoreCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
